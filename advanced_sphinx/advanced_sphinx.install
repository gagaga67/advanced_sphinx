<?php
// $Id: advanced_sphinx.install, v 1.0 2011/07/05 19:59:16 gagaga Exp $
/**
 * @file
 * Implementation of instal/uninstall hooks.
 */

function advanced_sphinx_install() {
  $fields_txt = array();
  $query = db_select('node', 'n')
    ->fields('n', array('type'))
    ->groupBy('n.type');
  $query->addExpression('COUNT(n.nid)', 'count');
  $query->join('node_type', 'nt', 'n.type = nt.type');
  $query->fields('nt', array('name'));
  $result = $query
    ->execute()
    ->fetchAll();
  $fields_txt_cache = cache_get('advanced_sphinx_fields', 'cache');
  if($fields_txt_cache){
    $fields_txt = $fields_txt_cache->data;
  }
  else{
    foreach ($result as $data) {
      if ($data->count > 0) {
        $indexes['index'][] = 'index_' . $data->type;
        $indexes['delta'][] = 'index_delta_' . $data->type;
        $fields_txt[$data->type] = array();
        $query_sub = db_select('field_config_instance', 'fci');
        $query_sub->join('field_config', 'fc', 'fc.id = fci.field_id');
        $query_sub->distinct();
        $result_sub = $query_sub
          ->fields('fci', array('field_name'))
          ->condition('fc.type', '%%text%%', 'LIKE')
          ->condition('fci.bundle', $data->type)
          ->execute()
          ->fetchAll();
        foreach ($result_sub as $data_sub) {
          $fields_txt[$data->type][] =  $data_sub->field_name;
        }
      }
    }
    cache_set('advanced_sphinx_fields', $fields_txt, 'cache');
  }
  $indexes = array();
  $indexes['index_join'][] = 'index_main_join';
  variable_set('advanced_sphinx_array_indexes', $indexes);
  foreach ($fields_txt as $ntype => $value) {
    $c = count($value);
    $n = 0;
    $res = '';
    $table_join = '';
    while ($n < $c) {
      $res = $res . ', field_data_' . $value[$n] . '.' . $value[$n] . '_value';
      $table_join = $table_join . ' LEFT JOIN {field_data_' . $value[$n] .'} ON field_data_' . $value[$n] .'.revision_id=node.vid';
      $n++;
    }
    db_query("CREATE OR REPLACE VIEW Sphinxindex_$ntype AS
              SELECT DISTINCT node.nid, node.vid, users.uid, users.name, node.created, node.type, node.language, node.changed, node.title$res, LENGTH(node.title) AS countitl
              FROM {node}
              JOIN {users} ON users.uid=node.uid
              $table_join
              WHERE node.status=1
              AND node.type='$ntype'
              GROUP BY node.nid
              ORDER BY node.vid DESC");
  }
}

/**
 * Implementation of hook_uninstall().
 */
function advanced_sphinx_uninstall() {
  cache_clear_all('variables', 'cache');
  variable_del('advanced_sphinx_generate_config');
  variable_del('advanced_sphinx_path_config');
  variable_del('advanced_sphinx_searchd_host');
  variable_del('advanced_sphinx_searchd_port');
  variable_del('advanced_sphinx_searchd_timeout');
  variable_del('advanced_sphinx_query_index');
  variable_del('advanced_sphinx_query_index_delta');
  variable_del('advanced_sphinx_excerpts_index');
  variable_del('advanced_sphinx_search_path');
  variable_del('advanced_sphinx_results_per_page');
  variable_del('advanced_sphinx_logs');
  variable_del('advanced_sphinx_yandex');
  variable_del('advanced_sphinx_excerpts_limit');
  variable_del('advanced_sphinx_excerpts_around');
  variable_del('advanced_sphinx_excerpts_single_passage');
  variable_del('advanced_sphinx_keys');
  variable_del('advanced_sphinx_config_min_word_len');
  variable_del('advanced_sphinx_config_min_infix_len');
  variable_del('advanced_sphinx_config_enable_star');
  variable_del('advanced_sphinx_config_html_strip');
  variable_del('advanced_sphinx_index_last_time');
  variable_del('advanced_sphinx_merge_last_time');
  variable_del('advanced_sphinx_delta_index_time');
  variable_del('advanced_sphinx_merge_index_time');

  $fields_txt = array();
  $fields_txt_cache = cache_get('advanced_sphinx_fields', 'cache');
  if($fields_txt_cache){
    $fields_txt = $fields_txt_cache->data;
  }
  else {
    $query = db_select('node_type', 'n');
    $result = $query
      ->fields('n', array('type', 'name'))
      ->execute()
      ->fetchAll();
    foreach ($result as $res) {
      $fields_txt[$res->type] = $res->name;
    }
  }

  if (isset($fields_txt) && !empty($fields_txt)) {
    foreach ($fields_txt as $ntype => $value) {
      db_query("DROP VIEW IF EXISTS Sphinxindex_$ntype");
    }
  }
}

function advanced_sphinx_schema() {
  $schema['advanced_sphinx_livup'] = array(
    'fields' => array(
      'counter_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_doc_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('counter_id'),
  );

  $schema['advanced_sphinx_logs'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'keyword' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 255,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'counter' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}